# Copyright (c) 2022-2023, Arm Limited and Contributors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)

# Set config variables for the project and dependencies
set(CMAKE_SYSTEM_PROCESSOR @CMAKE_SYSTEM_PROCESSOR@)
set(IOTSDK_FETCH_LIST
    cmsis-sockets-api
    lwip
    mbedtls
    pigweed
    @RTOS_FETCH@
    @PLATFORM_FETCH@
)
set(VARIANT "FVP")
@RTOS_CONFIG_SET@

include(FetchContent)

set(pw_log_BACKEND pw_log_mcu_driver_hal CACHE STRING "" FORCE)

option(MBED_CONF_APP_USE_TLS_SOCKET "Use TLS socket for connection" OFF)

if (MBED_CONF_APP_USE_TLS_SOCKET)
  add_definitions(-DMBED_CONF_APP_USE_TLS_SOCKET=ON)
endif()

# Toolchain files need to exist before first call to project
FetchContent_Declare(iotsdk-toolchains
    GIT_REPOSITORY  @TOOLCHAINS_URL@
    GIT_TAG         @TOOLCHAINS_TAG@
    SOURCE_DIR      ${CMAKE_BINARY_DIR}/toolchains
)
FetchContent_MakeAvailable(iotsdk-toolchains)

# Declare top-level project
project(iotsdk-mbed-os-netsocket)

# Set executable suffix to be toolchain-independent for ease of documentation
# and testing. This needs to be done after first call to project().
set(CMAKE_EXECUTABLE_SUFFIX .elf)

# Add Open IoT SDK
FetchContent_Declare(open-iot-sdk
    GIT_REPOSITORY  @IOTSDK_URL@
    GIT_TAG         @IOTSDK_TAG@
)
FetchContent_MakeAvailable(open-iot-sdk)

# Add Open IoT SDK modules to path
list(APPEND CMAKE_MODULE_PATH ${open-iot-sdk_SOURCE_DIR}/cmake)

# Add the project_options tool for code quality checks on this example.
# In a user's own project, the use of project_options is entirely optional.
FetchContent_Declare(project_options
    GIT_REPOSITORY  @PROJECT_OPTIONS_URL@
    GIT_TAG         @PROJECT_OPTIONS_TAG@
)
FetchContent_MakeAvailable(project_options)
include(${project_options_SOURCE_DIR}/Index.cmake)
include(${project_options_SOURCE_DIR}/src/DynamicProjectOptions.cmake)

# Apply Open IoT SDK's default compiler warnings to this example via project_options
include(${open-iot-sdk_SOURCE_DIR}/cmake/AddToolchainWarningFlags.cmake)
set(COMPILER_WARNINGS ${IOTSDK_WARNING_FLAGS} ${IOTSDK_WARNING_AS_ERRORS_FLAGS})
dynamic_project_options(
    CLANG_WARNINGS  ${COMPILER_WARNINGS}
    GCC_WARNINGS    ${COMPILER_WARNINGS}
)

include(ConvertElfToBin)
include(CTest)

# CMSIS 5 require projects to provide configuration macros via RTE_Components.h
# and CMSIS_device_header. The macro CMSIS_device_header is not automatically set
# based on CMAKE_SYSTEM_PROCESSOR in the place where cmsis-core is first defined,
# because a project may want to provide its own device header.
target_compile_definitions(cmsis-core INTERFACE CMSIS_device_header="@CMSIS_device_header@")

# Add RTOS configuration headers
@RTOS_HEADER_INCLUDE@

# Link cmsis-rtos-api against a concrete implementation
target_link_libraries(cmsis-rtos-api
    PUBLIC
        @RTOS_LIBS@
)

# lwipcore requires the config defined by lwip-cmsis-port
target_link_libraries(lwipcore
    PRIVATE
        lwip-cmsis-port
)

# lwip requires user_lwipopts.h, we use the template provided by the lwip-cmsis-port
get_target_property(lwip-cmsis-port_SOURCE_DIR lwip-cmsis-port SOURCE_DIR)

target_include_directories(lwipopts
    INTERFACE
        ${lwip-cmsis-port_SOURCE_DIR}/include/user-config
)

# provide method to use for tracing by the lwip port (optional)
target_compile_definitions(lwipopts
    INTERFACE
        DEBUG_PRINT=printf
)

# Link the emac factory to LwIP port
target_link_libraries(lwip-cmsis-port PUBLIC iotsdk-emac-factory)

# mbedtls config
target_include_directories(mbedtls-config
    INTERFACE
        mbedtls-config
)

target_link_libraries(mbedtls-config
    INTERFACE
        mbedtls-threading-cmsis-rtos
)

target_compile_definitions(mbedtls-config
    INTERFACE
        MBEDTLS_CONFIG_FILE="mbedtls_config.h"
)

# Pigweed
target_link_libraries(pw_log_mcu_driver_hal
    PRIVATE
    pw_log_mdh_cmsis_rtos_lock
)

# Add user application
add_executable(iotsdk-mbed-os-netsocket main.cpp)

target_link_libraries(iotsdk-mbed-os-netsocket
    # Kernel

    # Startup
    @PLATFORM_STARTUP@

    # lwip and IP
    iotsdk-ip-network-api
    lwip-sockets
    lwipopts

    mbedtls

    # Pigweed
    pw_log
    pw_log_mdh_cmsis_rtos_lock

    # Drivers
    mcu-driver-hal
    mcu-driver-bootstrap
    @PLATFORM_LIBS@

    # Factories
    iotsdk-serial-retarget
    iotsdk-emac-factory

    # SDK project options/warnings (this is optional)
    project_options
    project_warnings

    # Mbed OS netsocket
    mbed-os-netsocket
)

if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    set(linker_script ${CMAKE_CURRENT_LIST_DIR}/gcc.ld)
    target_link_options(iotsdk-mbed-os-netsocket PRIVATE -T ${linker_script})
elseif(CMAKE_C_COMPILER_ID STREQUAL "ARMClang")
    set(linker_script ${CMAKE_CURRENT_LIST_DIR}/armclang.sct)
    target_link_options(iotsdk-mbed-os-netsocket PRIVATE --scatter=${linker_script})
endif()
set_target_properties(iotsdk-mbed-os-netsocket PROPERTIES LINK_DEPENDS ${linker_script})

target_elf_to_bin(iotsdk-mbed-os-netsocket)

add_test(
    NAME    iotsdk-mbed-os-netsocket
    COMMAND htrun
        --image-path=iotsdk-mbed-os-netsocket@HTRUN_IMG_FORMAT@
        --compare-log=${CMAKE_CURRENT_LIST_DIR}/test.log
        @HTRUN_COMMON_ARGUMENTS@
        @HTRUN_ARGS@
    COMMAND_EXPAND_LISTS
)
