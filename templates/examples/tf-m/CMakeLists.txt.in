# Copyright (c) 2021-2022, Arm Limited and Contributors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)

# Set config variables for the project and dependencies
set(CMAKE_SYSTEM_PROCESSOR @CMAKE_SYSTEM_PROCESSOR@)
set(IOTSDK_FETCH_LIST
    trusted-firmware-m
    @RTOS_FETCH@
    @PLATFORM_FETCH@
)
set(TFM_PSA_FIRMWARE_UPDATE ON)
set(TFM_CMAKE_ARGS -DTFM_PROFILE=profile_medium -DCONFIG_TFM_ENABLE_CP10CP11=ON)
@PLATFORM_TFM_OPTS@
@RTOS_CONFIG_SET@

include(FetchContent)

# Toolchain files need to exist before first call to project
FetchContent_Declare(iotsdk-toolchains
    GIT_REPOSITORY  @TOOLCHAINS_URL@
    GIT_TAG         @TOOLCHAINS_TAG@
    SOURCE_DIR      ${CMAKE_BINARY_DIR}/toolchains
)
FetchContent_MakeAvailable(iotsdk-toolchains)

# Declare top-level project
project(iotsdk-example-tf-m)

# Set executable suffix to be toolchain-independent for ease of documentation
# and testing. This needs to be done after first call to project().
set(CMAKE_EXECUTABLE_SUFFIX .elf)

# Add Open IoT SDK
FetchContent_Declare(open-iot-sdk
    GIT_REPOSITORY  @IOTSDK_URL@
    GIT_TAG         @IOTSDK_TAG@
)
FetchContent_MakeAvailable(open-iot-sdk)

# Add Open IoT SDK modules to path
list(APPEND CMAKE_MODULE_PATH ${open-iot-sdk_SOURCE_DIR}/cmake)
list(APPEND CMAKE_MODULE_PATH ${open-iot-sdk_SOURCE_DIR}/components/trusted-firmware-m)

# Add the project_options tool for code quality checks on this example.
# In a user's own project, the use of project_options is entirely optional.
FetchContent_Declare(project_options
    GIT_REPOSITORY  @PROJECT_OPTIONS_URL@
    GIT_TAG         @PROJECT_OPTIONS_TAG@
)
FetchContent_MakeAvailable(project_options)
include(${project_options_SOURCE_DIR}/Index.cmake)
include(${project_options_SOURCE_DIR}/src/DynamicProjectOptions.cmake)

# Apply Open IoT SDK's default compiler warnings to this example via project_options
include(${open-iot-sdk_SOURCE_DIR}/cmake/AddToolchainWarningFlags.cmake)
set(COMPILER_WARNINGS ${IOTSDK_WARNING_FLAGS} ${IOTSDK_WARNING_AS_ERRORS_FLAGS})
dynamic_project_options(
    CLANG_WARNINGS  ${COMPILER_WARNINGS}
    GCC_WARNINGS    ${COMPILER_WARNINGS}
)

include(ConvertElfToBin)
include(SignTfmImage)
include(CTest)

# Configure component properties

# CMSIS 5 require projects to provide configuration macros via RTE_Components.h
# and CMSIS_device_header. The macro CMSIS_device_header is not automatically set
# based on CMAKE_SYSTEM_PROCESSOR in the place where cmsis-core is first defined,
# because a project may want to provide its own device header.
target_compile_definitions(cmsis-core INTERFACE CMSIS_device_header="@CMSIS_device_header@")

# Add RTOS configuration headers
@RTOS_HEADER_INCLUDE@

# Link cmsis-rtos-api against a concrete implementation
target_link_libraries(cmsis-rtos-api
    PUBLIC
        @RTOS_LIBS@
)

# Add example applications

# PSA Crypto example
add_executable(iotsdk-example-tf-m-crypto
    crypto.c
    main.c
)
add_dependencies(iotsdk-example-tf-m-crypto trusted-firmware-m-build)
target_link_libraries(iotsdk-example-tf-m-crypto
    mcu-driver-hal
    mcu-driver-bootstrap

    cmsis-rtos-api
    tfm-ns-interface-cmsis-rtos
    iotsdk-serial-retarget

    @PLATFORM_LIBS@
    @PLATFORM_STARTUP@

    # SDK project options/warnings (this is optional)
    project_options
    project_warnings
)
target_elf_to_bin(iotsdk-example-tf-m-crypto)
iotsdk_tf_m_sign_image(iotsdk-example-tf-m-crypto)
if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    set(linker_script ${CMAKE_CURRENT_LIST_DIR}/gcc.ld)
    target_link_options(iotsdk-example-tf-m-crypto PRIVATE -T ${linker_script})
elseif(CMAKE_C_COMPILER_ID STREQUAL "ARMClang")
    set(linker_script ${CMAKE_CURRENT_LIST_DIR}/armclang.sct)
    target_link_options(iotsdk-example-tf-m-crypto PRIVATE --scatter=${linker_script})
endif()

# A user project that consumes the SDK needs to explicitly provide
# addresses in order to merge images for TF-M. The addresses cannot
# be easily programmatically extracted as they are defined in linker
# scripts.
# Order: <bootloader> <signed secure TF-M firmware> <signed non-secure user app>
iotsdk_tf_m_merge_images(iotsdk-example-tf-m-crypto @PLATFORM_TFM_ADDRESSES@)

add_test(
    NAME    iotsdk-example-tf-m-crypto
    COMMAND htrun
        --image-path=iotsdk-example-tf-m-crypto_merged@HTRUN_IMG_FORMAT@
        --compare-log=${CMAKE_CURRENT_LIST_DIR}/crypto.log
        @HTRUN_COMMON_ARGUMENTS@
        @HTRUN_ARGS@
    COMMAND_EXPAND_LISTS
)

# PSA Firmware Update example
add_executable(iotsdk-example-tf-m-firmware-update
    firmware_update.c
    main.c
)
add_dependencies(iotsdk-example-tf-m-firmware-update trusted-firmware-m-build)
target_link_libraries(iotsdk-example-tf-m-firmware-update
    mcu-driver-hal
    mcu-driver-bootstrap

    cmsis-rtos-api
    tfm-ns-interface-cmsis-rtos
    iotsdk-serial-retarget

    @PLATFORM_LIBS@
    @PLATFORM_STARTUP@

    # SDK project options/warnings (this is optional)
    project_options
    project_warnings
)
target_elf_to_bin(iotsdk-example-tf-m-firmware-update)
iotsdk_tf_m_sign_image(iotsdk-example-tf-m-firmware-update)
if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    set(linker_script ${CMAKE_CURRENT_LIST_DIR}/gcc.ld)
    target_link_options(iotsdk-example-tf-m-firmware-update PRIVATE -T ${linker_script})
elseif(CMAKE_C_COMPILER_ID STREQUAL "ARMClang")
    set(linker_script ${CMAKE_CURRENT_LIST_DIR}/armclang.sct)
    target_link_options(iotsdk-example-tf-m-firmware-update PRIVATE --scatter=${linker_script})
endif()

# A user project that consumes the SDK needs to explicitly provide
# addresses in order to merge images for TF-M. The addresses cannot
# be easily programmatically extracted as they are defined in linker
# scripts.
# Order: <bootloader> <signed secure TF-M firmware> <signed non-secure user app>
iotsdk_tf_m_merge_images(iotsdk-example-tf-m-firmware-update @PLATFORM_TFM_ADDRESSES@)

add_test(
    NAME    iotsdk-example-tf-m-firmware-update
    COMMAND htrun
        --image-path=iotsdk-example-tf-m-firmware-update_merged@HTRUN_IMG_FORMAT@
        --compare-log=${CMAKE_CURRENT_LIST_DIR}/firmware_update.log
        @HTRUN_COMMON_ARGUMENTS@
        @HTRUN_ARGS@
    COMMAND_EXPAND_LISTS
)
