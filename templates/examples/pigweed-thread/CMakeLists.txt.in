# Copyright (c) 2022-2023, Arm Limited and Contributors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)

# Set config variables for the project and dependencies
set(CMAKE_SYSTEM_PROCESSOR @CMAKE_SYSTEM_PROCESSOR@)
set(CMAKE_CXX_STANDARD 17)
set(IOTSDK_FETCH_LIST
    pigweed
    @RTOS_FETCH@
    @PLATFORM_FETCH@
)

include(FetchContent)

# Toolchain files need to exist before first call to project
FetchContent_Declare(iotsdk-toolchains
    GIT_REPOSITORY  @TOOLCHAINS_URL@
    GIT_TAG         @TOOLCHAINS_TAG@
    SOURCE_DIR      ${CMAKE_BINARY_DIR}/toolchains
)
FetchContent_MakeAvailable(iotsdk-toolchains)

# Declare top-level project
project(iotsdk-example-pigweed-thread)

# Set executable suffix to be toolchain-independent for ease of documentation
# and testing. This needs to be done after first call to project().
set(CMAKE_EXECUTABLE_SUFFIX .elf)

# Set Pigweed backends before SDK fetch.
function(set_pw_backend FACADE BACKEND)
    set(${FACADE}_BACKEND ${BACKEND} CACHE STRING "" FORCE)
endfunction()
set_pw_backend(pw_assert.assert pw_assert_log.assert_backend)
set_pw_backend(pw_assert.check pw_assert_log.check_backend)
set_pw_backend(pw_chrono.system_clock pw_chrono_cmsis_rtos.system_clock)
set_pw_backend(pw_chrono.system_timer pw_chrono_cmsis_rtos.system_timer)
set_pw_backend(pw_interrupt.context pw_interrupt_cortex_m.context)
set_pw_backend(pw_log pw_log_mcu_driver_hal)
set_pw_backend(pw_sync.binary_semaphore pw_sync_cmsis_rtos.binary_semaphore)
set_pw_backend(pw_sync.counting_semaphore pw_sync_cmsis_rtos.counting_semaphore)
set_pw_backend(pw_sync.interrupt_spin_lock pw_sync_cmsis_rtos.interrupt_spin_lock)
set_pw_backend(pw_sync.mutex pw_sync_cmsis_rtos.mutex)
set_pw_backend(pw_sync.thread_notification pw_sync_cmsis_rtos.thread_notification)
set_pw_backend(pw_sync.timed_mutex pw_sync_cmsis_rtos.timed_mutex)
set_pw_backend(pw_sync.timed_thread_notification pw_sync_cmsis_rtos.timed_thread_notification)
set_pw_backend(pw_thread.id pw_thread_cmsis_rtos.id)
set_pw_backend(pw_thread.sleep pw_thread_cmsis_rtos.sleep)
set_pw_backend(pw_thread.thread pw_thread_cmsis_rtos.thread)
set_pw_backend(pw_thread.yield pw_thread_cmsis_rtos.yield)

# Add Open IoT SDK
FetchContent_Declare(open-iot-sdk
    GIT_REPOSITORY  @IOTSDK_URL@
    GIT_TAG         @IOTSDK_TAG@
)
FetchContent_MakeAvailable(open-iot-sdk)

# Add Open IoT SDK modules to path
list(APPEND CMAKE_MODULE_PATH ${open-iot-sdk_SOURCE_DIR}/cmake)

# Add the project_options tool for code quality checks on this example.
# In a user's own project, the use of project_options is entirely optional.
FetchContent_Declare(project_options
    GIT_REPOSITORY  @PROJECT_OPTIONS_URL@
    GIT_TAG         @PROJECT_OPTIONS_TAG@
)
FetchContent_MakeAvailable(project_options)
include(${project_options_SOURCE_DIR}/Index.cmake)
include(${project_options_SOURCE_DIR}/src/DynamicProjectOptions.cmake)

# Apply Open IoT SDK's default compiler warnings to this example via project_options
include(${open-iot-sdk_SOURCE_DIR}/cmake/AddToolchainWarningFlags.cmake)
set(COMPILER_WARNINGS ${IOTSDK_WARNING_FLAGS} ${IOTSDK_WARNING_AS_ERRORS_FLAGS})
dynamic_project_options(
    CLANG_WARNINGS  ${COMPILER_WARNINGS}
    GCC_WARNINGS    ${COMPILER_WARNINGS}
)

include(ConvertElfToBin)
include(CTest)

# Configure component properties

# CMSIS 5 require projects to provide configuration macros via RTE_Components.h
# and CMSIS_device_header. The macro CMSIS_device_header is not automatically set
# based on CMAKE_SYSTEM_PROCESSOR in the place where cmsis-core is first defined,
# because a project may want to provide its own device header.
target_compile_definitions(cmsis-core INTERFACE CMSIS_device_header="@CMSIS_device_header@")

target_compile_definitions(pw_iot_sdk_config
    INTERFACE
        PW_IOTSDK_CMSIS_RTX=$<IN_LIST:cmsis-rtx,IOTSDK_FETCH_LIST>
)

# Add RTOS configuration headers
@RTOS_HEADER_INCLUDE@

# Link cmsis-rtos-api against a concrete implementation
target_link_libraries(cmsis-rtos-api
    PUBLIC
        @RTOS_LIBS@
)

function(set_linker_script target)
    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        set(linker_script ${CMAKE_CURRENT_SOURCE_DIR}/gcc.ld)
        target_link_options(${target} PRIVATE -T ${linker_script})
    elseif(CMAKE_C_COMPILER_ID STREQUAL "ARMClang")
        set(linker_script ${CMAKE_CURRENT_SOURCE_DIR}/armclang.sct)
        target_link_options(${target} PRIVATE --scatter=${linker_script})
    endif()
    set_target_properties(${target} PROPERTIES LINK_DEPENDS ${linker_script})
endfunction()

target_link_libraries(pw_log INTERFACE pw_log_mcu_driver_hal)
target_link_libraries(pw_log_mcu_driver_hal INTERFACE pw_log_mdh_cmsis_rtos_lock)
target_link_libraries(pw_log INTERFACE pw_log_mcu_driver_hal)
target_link_libraries(pw_log_mdh_cmsis_rtos_lock INTERFACE cmsis-rtos-api)
target_link_libraries(pw_sys_io INTERFACE pw_sys_io_mdh_cmsis_rtos_lock)

add_executable(iotsdk-example-pigweed-thread main.cc)
target_link_libraries(iotsdk-example-pigweed-thread
    PUBLIC
        pw_assert.assert
        pw_assert.check
        pw_log
        pw_log_mdh_cmsis_rtos_lock
        pw_sync.interrupt_spin_lock
        pw_sync_cmsis_rtos.interrupt_spin_lock
        pw_thread.id
        pw_thread.thread
        pw_thread.yield

        cmsis-rtos-api
        @PLATFORM_LIBS@
        @PLATFORM_STARTUP@

        iotsdk-serial-retarget

        project_options
        project_warnings
)
set_linker_script(iotsdk-example-pigweed-thread)
target_elf_to_bin(iotsdk-example-pigweed-thread)
add_test(
    NAME    iotsdk-example-pigweed-thread
    COMMAND htrun
        --image-path=iotsdk-example-pigweed-thread@HTRUN_IMG_FORMAT@
        --compare-log=${CMAKE_CURRENT_LIST_DIR}/test.log
        @HTRUN_COMMON_ARGUMENTS@
        @HTRUN_ARGS@
    COMMAND_EXPAND_LISTS
)
