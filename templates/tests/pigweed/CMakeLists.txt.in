# Copyright (c) 2022-2023, Arm Limited and Contributors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)

# Set config variables for the project and dependencies
set(CMAKE_SYSTEM_PROCESSOR @CMAKE_SYSTEM_PROCESSOR@)
set(CMAKE_CXX_STANDARD 17)
set(IOTSDK_FETCH_LIST
    pigweed
    @RTOS_FETCH@
    @PLATFORM_FETCH@
)

include(FetchContent)

# Toolchain files need to exist before first call to project
FetchContent_Declare(iotsdk-toolchains
    GIT_REPOSITORY  @TOOLCHAINS_URL@
    GIT_TAG         @TOOLCHAINS_TAG@
    SOURCE_DIR      ${CMAKE_BINARY_DIR}/toolchains
)
FetchContent_MakeAvailable(iotsdk-toolchains)

# Declare top-level project
project(iotsdk-pigweed-tests)

# Set executable suffix to be toolchain-independent for ease of documentation
# and testing. This needs to be done after first call to project().
set(CMAKE_EXECUTABLE_SUFFIX .elf)

# Configure Pigweed backends before fetching Pigweed, otherwise it won't define the facade test targets.
include (./cmake/pigweed-backends.cmake)

# Add Open IoT SDK
FetchContent_Declare(open-iot-sdk
    GIT_REPOSITORY  @IOTSDK_URL@
    GIT_TAG         @IOTSDK_TAG@
)
FetchContent_MakeAvailable(open-iot-sdk)

# Add Open IoT SDK modules to path
list(APPEND CMAKE_MODULE_PATH ${open-iot-sdk_SOURCE_DIR}/cmake)

# Add the project_options tool for code quality checks on this example.
# In a user's own project, the use of project_options is entirely optional.
FetchContent_Declare(project_options
    GIT_REPOSITORY  @PROJECT_OPTIONS_URL@
    GIT_TAG         @PROJECT_OPTIONS_TAG@
)
FetchContent_MakeAvailable(project_options)
include(${project_options_SOURCE_DIR}/Index.cmake)
include(${project_options_SOURCE_DIR}/src/DynamicProjectOptions.cmake)

# Apply Open IoT SDK's default compiler warnings to this example via project_options
include(${open-iot-sdk_SOURCE_DIR}/cmake/AddToolchainWarningFlags.cmake)
set(COMPILER_WARNINGS ${IOTSDK_WARNING_FLAGS} ${IOTSDK_WARNING_AS_ERRORS_FLAGS})
dynamic_project_options(
    CLANG_WARNINGS  ${COMPILER_WARNINGS}
    GCC_WARNINGS    ${COMPILER_WARNINGS}
)

include(ConvertElfToBin)
include(CTest)

# Configure component properties

# CMSIS 5 require projects to provide configuration macros via RTE_Components.h
# and CMSIS_device_header. The macro CMSIS_device_header is not automatically set
# based on CMAKE_SYSTEM_PROCESSOR in the place where cmsis-core is first defined,
# because a project may want to provide its own device header.
target_compile_definitions(cmsis-core INTERFACE CMSIS_device_header="@CMSIS_device_header@")

target_compile_definitions(pw_iot_sdk_config
    INTERFACE
        PW_IOTSDK_CMSIS_RTX=$<IN_LIST:cmsis-rtx,IOTSDK_FETCH_LIST>
)

# Add RTOS configuration headers
@RTOS_HEADER_INCLUDE@

# Link cmsis-rtos-api against a concrete implementation
target_link_libraries(cmsis-rtos-api
    PUBLIC
        @RTOS_LIBS@
)

# Include the main implementation
add_subdirectory(pw_unit_test_cmsis_rtos.main)

function(set_linker_script target)
    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        set(linker_script ${CMAKE_CURRENT_SOURCE_DIR}/gcc.ld)
        target_link_options(${target} PRIVATE -T ${linker_script})
    elseif(CMAKE_C_COMPILER_ID STREQUAL "ARMClang")
        set(linker_script ${CMAKE_CURRENT_SOURCE_DIR}/armclang.sct)
        target_link_options(${target} PRIVATE --scatter=${linker_script})
    endif()
    set_target_properties(${target} PROPERTIES LINK_DEPENDS ${linker_script})
endfunction()

target_link_libraries(pw_sys_io_mcu_driver_hal PUBLIC pw_sys_io_mdh_cmsis_rtos_lock)

function(create_iotsdk_pigweed_test NAME PARENT)
    target_include_directories(${PARENT} PRIVATE include)

    target_link_libraries(${PARENT}
        PRIVATE
            mcu-driver-hal
            mcu-driver-bootstrap

            pw_unit_test.main

            iotsdk-serial-retarget

            cmsis-rtos-api
            @PLATFORM_LIBS@
            @PLATFORM_STARTUP@

            project_options
            project_warnings
    )

    target_compile_definitions(${PARENT}
        PRIVATE
            PW_LOG_MDH_SHOW_FILENAME=1
    )

    set_target_properties(${PARENT}
        PROPERTIES
            # Place test executables files in root __build instead of the Pigweed build directory.
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
            # Rename binary to test name. File extension is added automatically here.
            OUTPUT_NAME "${NAME}"
    )

    add_custom_target(${NAME} ALL
        DEPENDS
            ${PARENT}
    )

    set_linker_script(${PARENT})

    add_test(
        NAME    ${NAME}
        COMMAND htrun
            --image-path=${NAME}@HTRUN_IMG_FORMAT@
            --compare-log=${CMAKE_CURRENT_LIST_DIR}/logs/${NAME}.log
            @HTRUN_COMMON_ARGUMENTS@
            @HTRUN_ARGS@
        COMMAND_EXPAND_LISTS
    )
endfunction()

# Create test per facade.
create_iotsdk_pigweed_test(iotsdk-test-pigweed-chrono-system-clock pw_chrono.system_clock_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-chrono-system-timer pw_chrono.system_timer_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-sync-binary-semaphore pw_sync.binary_semaphore_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-sync-counting-semaphore pw_sync.counting_semaphore_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-sync-interrupt-spin-lock pw_sync.interrupt_spin_lock_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-sync-mutex pw_sync.mutex_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-sync-thread-notification pw_sync.thread_notification_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-sync-timed-mutex pw_sync.timed_mutex_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-sync-timed-thread-notification pw_sync.timed_thread_notification_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-thread-id pw_thread.id_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-thread-sleep pw_thread.sleep_facade_test)
create_iotsdk_pigweed_test(iotsdk-test-pigweed-thread-yield pw_thread.yield_facade_test)

# Build all tests.
add_custom_target(iotsdk-pigweed-tests ALL
    DEPENDS
        iotsdk-test-pigweed-chrono-system-clock
        iotsdk-test-pigweed-chrono-system-timer
        iotsdk-test-pigweed-sync-binary-semaphore
        iotsdk-test-pigweed-sync-counting-semaphore
        iotsdk-test-pigweed-sync-interrupt-spin-lock
        iotsdk-test-pigweed-sync-mutex
        iotsdk-test-pigweed-sync-thread-notification
        iotsdk-test-pigweed-sync-timed-mutex
        iotsdk-test-pigweed-sync-timed-thread-notification
        iotsdk-test-pigweed-thread-id
        iotsdk-test-pigweed-thread-sleep
        iotsdk-test-pigweed-thread-yield
)
